plugins {
    id 'com.android.application'
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId rootProject.ext.applicationId
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"


        buildFeatures {
            // 启用viewBinding
            viewBinding = true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // 跟externalNativeBuild不能同时使用
    splits {
        // 根据ABI配置多个APK。
        abi {
            // 允许每个ABI构建多个APK.
            enable true
            // 默认情况下，所有ABI都包含在内，因此请使用reset（）并包含以指定我们仅希望针对x86和x86_64的APK。

            // 将Gradle应该为其创建APK的ABI列表重置为无。
            reset()
            // 指定Gradle应该为其创建APK的ABI列表。
            include "armeabi-v7a","arm64-v8a","x86","x86_64"

            // 指定我们是否生成包含所有ABI的通用APK。
            universalApk false
        }
    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation project(path: ':nativelib')
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation project(':nativelib')
}